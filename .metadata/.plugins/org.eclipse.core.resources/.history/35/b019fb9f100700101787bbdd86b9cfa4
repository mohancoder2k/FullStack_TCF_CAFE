package com.tcf.order.service;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.tcf.order.Repository.OrderRepository;
import com.tcf.order.model.Order;
import com.tcf.order.model.OrderResponse;
import com.tcf.order.model.ProductDTO;
import com.tcf.order.model.ProductResponse;

import java.util.ArrayList;
import java.util.List;

@Service
public class OrderServiceImpl implements OrderService {

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private RestTemplate restTemplate;

    @Override
    public Order createOrder(Order order) {
        double totalBill = 0;

        List<Long> productIds = order.getProductIds();
        List<Integer> quantities = order.getQuantities();

        // Fetch product details using RestTemplate
        for (int i = 0; i < productIds.size(); i++) {
            Long productId = productIds.get(i);
            Integer quantity = quantities.get(i);

            String productServiceUrl = "http://PRODUCTSERVICE/products/" + productId;
            ProductResponse product = restTemplate.getForObject(productServiceUrl, ProductResponse.class);

            if (product != null) {
                totalBill += product.getPrice() * quantity;
            } else {
                throw new RuntimeException("Product not found for ID: " + productId);
            }
        }

        order.setTotalBill(totalBill);
        return orderRepository.save(order);
    }
    @Override
    public List<Order> getAllOrders() {
        return orderRepository.findAll();
    }
    public List<OrderResponse> getAllOrdersWithProducts() {
        List<Order> orders = orderRepository.findAll();
        List<OrderResponse> orderResponses = new ArrayList<>();

        for (Order order : orders) {
            List<ProductDTO> productDetails = new ArrayList<>();

            for (int i = 0; i < order.getProductIds().size(); i++) {
                Long productId = order.getProductIds().get(i);
                int quantity = order.getQuantities().get(i);

                // Call ProductService using RestTemplate
                ProductDTO product = restTemplate.getForObject(
                        "http://localhost:8081/products/" + productId,
                        ProductDTO.class
                );

                if (product != null) {
                    product.setQuantity(quantity);
                    productDetails.add(product);
                }
            }

            // Create and add OrderResponse
            orderResponses.add(new OrderResponse(order, productDetails));
        }
        return orderResponses;
    }

}
