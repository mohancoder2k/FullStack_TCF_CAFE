package com.tcf.product.Controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import com.tcf.product.Entity.Product;
import com.tcf.product.Entity.ProductResponse;
import com.tcf.product.Service.ProductService;

import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import java.util.Base64;
import java.util.List;

@CrossOrigin
@RestController
@RequestMapping("/products")
public class ProductController {

    @Autowired
    private ProductService productService;

    // ✅ Create Product (With Image)
    @PostMapping(value = "/add", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public Product createProduct(
            @RequestParam String name,
            @RequestParam String description,
            @RequestParam double price,
            @RequestParam int stock,
            @RequestParam MultipartFile image) {
        return productService.createProduct(name, description, price, stock, image);
    }

    // ✅ Get All Products
    @GetMapping("/all")
    public List<Product> getAllProducts() {
        return productService.getAllProducts();
    }

    // ✅ Get Product By ID (With Base64 Image)
    @GetMapping("/{id}")
    public ResponseEntity<?> getProductById(@PathVariable Long id) {
        Product product = productService.getProductById(id);

        if (product == null) {
            return ResponseEntity.status(404).body("Product not found with ID: " + id);
        }

        // Convert image to Base64
        String base64Image = product.getImage() != null ?
                Base64.getEncoder().encodeToString(product.getImage()) : null;

        ProductResponse response = new ProductResponse();
        response.setId(product.getId());
        response.setName(product.getName());
        response.setDescription(product.getDescription());
        response.setPrice(product.getPrice());
        response.setStock(product.getStock());
        response.setBase64Image(base64Image);

        return ResponseEntity.ok(response);
    }

    // ✅ Get Product Image (As JPEG)
    @GetMapping("/image/{id}")
    public ResponseEntity<byte[]> getProductImage(@PathVariable Long id) {
        byte[] image = productService.getProductImage(id);
        if (image == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok().contentType(MediaType.IMAGE_JPEG).body(image);
    }

    // ✅ Update Product (Optional Image)
    @PutMapping(value = "/update/{id}", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<?> updateProduct(
            @PathVariable Long id,
            @RequestParam String name,
            @RequestParam String description,
            @RequestParam double price,
            @RequestParam int stock,
            @RequestParam(required = false) MultipartFile image) {

        Product updatedProduct = productService.updateProduct(id, name, description, price, stock, image);

        if (updatedProduct == null) {
            return ResponseEntity.status(404).body("Product not found with ID: " + id);
        }
        return ResponseEntity.ok(updatedProduct);
    }

    // ✅ Delete Product
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> deleteProduct(@PathVariable Long id) {
        boolean isDeleted = productService.deleteProduct(id);
        if (!isDeleted) {
            return ResponseEntity.status(404).body("Product not found with ID: " + id);
        }
        return ResponseEntity.ok("Product deleted successfully!");
    }
}
