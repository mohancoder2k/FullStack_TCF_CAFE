package com.tcf.product.Service;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.tcf.product.Entity.Product;
import com.tcf.product.Repository.ProductRepository;

import java.io.IOException;
import java.util.List;

@Service
public class ProductServiceImpl implements ProductService {

	 @Autowired
	    private ProductRepository productRepository;

	    @Override
	    public Product createProduct(String name, String description, double price, int stock, MultipartFile image) {
	        try {
	            Product product = new Product();
	            product.setName(name);
	            product.setDescription(description);
	            product.setPrice(price);
	            product.setStock(stock);
	            product.setImage(image.getBytes());
	            return productRepository.save(product);
	        } catch (IOException e) {
	            throw new RuntimeException("Error saving product image", e);
	        }
	    }

	    @Override
	    public List<Product> getAllProducts() {
	        return productRepository.findAll();
	    }

	    @Override
	    public Product getProductById(Long id) {
	        return productRepository.findById(id)
	                .orElseThrow(() -> new RuntimeException("Product not found with ID: " + id));
	    }

	    @Override
	    public byte[] getProductImage(Long id) {
	        Product product = getProductById(id);
	        return product.getImage();
	    }

	    @Override
	    public Product updateProduct(Long id, String name, String description, double price, int stock, MultipartFile image) {
	        try {
	            Product existingProduct = getProductById(id);
	            existingProduct.setName(name);
	            existingProduct.setDescription(description);
	            existingProduct.setPrice(price);
	            existingProduct.setStock(stock);
	            if (image != null) {
	                existingProduct.setImage(image.getBytes());
	            }
	            return productRepository.save(existingProduct);
	        } catch (IOException e) {
	            throw new RuntimeException("Error updating product image", e);
	        }
	    }

	    @Override
	    public void deleteProduct(Long id) {
	        productRepository.deleteById(id);
	    }
}
